generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Product {
  productId   String         @id @default(cuid())
  name        String
  description String?
  price       Float
  quantity    Int
  ownerId     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    String?
  campaign    Campaign[]
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images      ProductImage[]
  media       ProductMedia[]

  @@index([ownerId], map: "Product_ownerId_fkey")
}

model ProductMedia {
  id             String  @id @default(cuid())
  url            String
  productMediaId String
  product        Product @relation(fields: [productMediaId], references: [productId], onDelete: Cascade)

  @@index([productMediaId], map: "ProductMedia_productMediaId_fkey")
}

model ProductImage {
  id             String  @id @default(cuid())
  url            String
  productImageId String
  product        Product @relation(fields: [productImageId], references: [productId], onDelete: Cascade)

  @@index([productImageId], map: "ProductImage_productId_fkey")
}

model Campaign {
  id                 String               @id @default(cuid())
  code               String               @unique
  name               String
  description        String?
  callCenterTeamSize String
  leadsRequirements  String
  targetCountry      String
  targetGender       Gender
  trafficSource      TrafficSourceDefault
  targetAge          Json
  workingDays        Json
  workingHours       Json
  status             CampaignStatus       @default(OnHold)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  productId          String?
  userId             String
  product            Product?             @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id])
  leads              Lead[]
  targetRegion       TargetRegion[]

  @@index([productId], map: "Campaign_productProductId_fkey")
  @@index([userId], map: "Campaign_userId_fkey")
}

model TargetRegion {
  id         String   @id @default(cuid())
  regionName String
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId], map: "TargetRegion_campaignId_fkey")
}

model Lead {
  id         String     @id @default(cuid())
  ip         String
  name       String
  phone      String
  address    String
  state      String
  region     String
  country    String
  status     LeadStatus @default(OnHold)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String?
  campaingId String
  campaign   Campaign   @relation(fields: [campaingId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id])

  @@index([campaingId], map: "Lead_leadCampaingId_fkey")
  @@index([userId], map: "Lead_userId_fkey")
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  role           User_role       @default(CUSTOMER)
  password       String?
  active         Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  activateTokens ActivateToken[]
  apiKeys        ApiKey[]
  BearerToken    BearerToken[]
  campaigns      Campaign[]
  leads          Lead[]
  products       Product[]
  sessions       Session[]
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "ActivateToken_userId_fkey")
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key, enabled])
  @@index([userId], map: "ApiKey_userId_fkey")
}

model BearerToken {
  id        String    @id @default(cuid())
  key       String    @unique
  userId    String
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "BearerToken_userId_fkey")
}

enum TrafficSourceDefault {
  Social
  Adult
  Native
  Google
  Facebook
}

enum CampaignStatus {
  OnHold
  InProgress
  Canceled
  Done
}

enum LeadStatus {
  OnHold
  Trashed
  Paid
  Approved
}

enum Gender {
  Male
  Female
}

enum User_role {
  SUPER_Admin
  ADMIN
  CLIENT
  CUSTOMER
}
