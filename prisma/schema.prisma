generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Product {
  productId   String         @id @default(cuid())
  name        String
  description String?
  price       Float
  quantity    Int
  ownerId     String
  campaign    Campaign?
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images      ProductImage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([ownerId], map: "Product_ownerId_fkey")
}

model ProductImage {
  id             String  @id @default(cuid())
  url            String
  productImageId String
  product        Product @relation(fields: [productImageId], references: [productId], onDelete: Cascade)

  @@index([productImageId], map: "ProductImage_productId_fkey")
}

model Campaign {
  id         String  @id @default(cuid())
  name       String
  campaignId String  @unique
  product    Product @relation(fields: [campaignId], references: [productId])
  lead       Leads?

  @@index([campaignId], map: "Campaign_campaignId_fkey")
}

model Leads {
  id       String   @id @default(cuid())
  name     String
  phone    String
  ip       String
  leadId   String   @unique
  campaign Campaign @relation(fields: [leadId], references: [campaignId])

  @@index([leadId], map: "Leads_campaignId_fkey")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole        @default(CUSTOMER)
  password       String?
  active         Boolean         @default(false)
  accounts       Account[]
  activateTokens ActivateToken[]
  products       Product[]
  sessions       Session[]
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "ActivateToken_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  id         String   @id @default(cuid())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  CLIENT
  CUSTOMER
}
